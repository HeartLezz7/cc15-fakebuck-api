REGISTER
POST /auth/REGISTER
BODY firstName,lastName,emailOrMobile,password,confirmpassword
RESPONSE
201 { accessToken: String, user:{id:Number,firstName:String} }
400 { message: String,emailOrMobileExist:true }
500 { message: String }

LOGIN 
POST / auth/login
BODY emailORMobile,password
RESPONSE
200 {accessToken: String,user:{id:Number,firstName:String}}
400 { message: String }
500 { message: String }

GET AUTHENTICATED USER
GET /auth/me
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { user: { id:Number, firstName: String } }
401 { message: String }
500 { message: String }

UPDATE PROFILE/COVER IMAGE
PATCH / user
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
BODY profileImage?, coverImage?
RESPONSE
200 { message: String, profileImage?: String, coverImage?: String}
400 { message: String }
401 { message: String }
500 { message: String }

GET  USER PROFILE BY id
GET /user/:userId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { user: {id:Number,firstName: String,...}, status:String}
400 { message: String }
401 { message: String }
500 { message: String }

REQUEST  USER PROFILE BY id
POST /friend/:receiverId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

REJECT REQUEST
DELETE /friend/:requestId/reject
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

CANCEL REQUEST
DELETE /friend/:receiverId/cancel
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

UNFRIEND
DELETE /friend/:friendId/unfriend
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

ACCEPT FRIEND
PATCH /friend/:requesterId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

CREATE POST
POST /POSTHEADER AUTHORIZATION Bearer ACCESS_TOKEN
BODY message?,image?
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

GET ALL POST INCLUDE POST FRIENDS 
GET /post/friend
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { post: [ {id:number,message:string, image:string, ...} ] }
400 { message: String }
401 { message: String }
500 { message: String }

TOGGLE LIKE
POST /post/:postId/LIKE
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }